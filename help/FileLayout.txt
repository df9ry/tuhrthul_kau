Best Way to Handle Resource Files (.ui and CSS)
The key challenge is ensuring that resource files are accessible both during development (when paths are relative to your project directory) and deployment (when the executable might be run from a different location). The best practice in Ada/GtkAda projects is to:
Organize resources in a dedicated directory during development.
Embed resources into the executable using GNAT’s resource bundling (e.g., GNAT.Resource_Files) or GTK’s GResource system for deployment.
Provide fallback logic to load files from the filesystem during development and from embedded resources in deployment.
Below is a step-by-step solution.
Updated File Layout
my_project/
├── src/
│   ├── main.adb           # Main entry point
│   ├── gui.adb            # GUI logic including resource loading
│   ├── gui.ads
│   └── utils.ads/utils.adb
├── resources/             # Resource files directory (development)
│   ├── ui/               # Subdirectory for Glade files
│   │   └── main_window.ui
│   └── css/              # Subdirectory for CSS files
│       └── style.css
├── obj/
├── bin/
├── my_project.gpr         # GNAT Project file
└── resources.gpr         # Optional: for generating embedded resources
resources/: Holds your .ui and .css files during development. Subdirectories (ui/ and css/) keep things organized.
Deployment: These files will be embedded into the executable, so the resources/ directory won’t need to be shipped.
Handling Resources in Development and Deployment
Step 1: Development Setup (Loading from Filesystem)
During development in GNAT Studio, you’ll load the .ui and .css files directly from the resources/ directory using relative paths.
Example gui.adb (Development Only):
ada
with Gtk.Builder; use Gtk.Builder;
with Gtk.Style_Context; use Gtk.Style_Context;
with Gtk.Css_Provider; use Gtk.Css_Provider;
with Glib.Error; use Glib.Error;

package body Gui is
   procedure Initialize_GUI is
      Builder : Gtk_Builder;
      Css_Provider : Gtk_Css_Provider;
      Error : GError;
   begin
      -- Load Glade .ui file
      Gtk_New (Builder);
      if Add_From_File (Builder, "resources/ui/main_window.ui", Error) = 0 then
         Put_Line ("Error loading UI: " & Get_Message (Error));
         return;
      end if;

      -- Load CSS file
      Gtk_New (Css_Provider);
      if Load_From_Path (Css_Provider, "resources/css/style.css", Error) = False then
         Put_Line ("Error loading CSS: " & Get_Message (Error));
         return;
      end if;
      Add_Provider_For_Screen (Get_Default_Screen, Css_Provider, Priority_Application);
   end Initialize_GUI;
end Gui;
Pros: Simple and works in GNAT Studio with the project structure as-is.
Cons: Hardcoded paths (resources/ui/main_window.ui) fail in deployment if the directory structure changes or isn’t present.
Step 2: Deployment Setup (Embedding Resources)
For deployment, embed the .ui and .css files into the executable using GTK’s GResource system, which GtkAda supports. This ensures the resources are always available, regardless of the filesystem.
a. Create a resources.xml File
Define which files to embed in a resources.xml file (place it in resources/):
xml
<?xml version="1.0" encoding="UTF-8"?>
<gresources>
  <gresource prefix="/org/myproject">
    <file>ui/main_window.ui</file>
    <file>css/style.css</file>
  </gresource>
</gresources>
prefix="/org/myproject": A namespace for your resources (customize as needed).
b. Compile Resources into a .c File
Use the glib-compile-resources tool (part of GTK+ development tools):
bash
glib-compile-resources --target=src/resources.c --generate-source resources/resources.xml
This generates resources.c in your src/ directory. It contains the binary data of your .ui and .css files.
c. Integrate with Ada
Add resources.c to your GNAT project and register the resources with GtkAda.
Update your .gpr file to include the C file:
ada
project My_Project is
   for Source_Dirs use ("src");
   for Object_Dir use "obj";
   for Exec_Dir use "bin";
   for Main use ("main.adb");
   for Languages use ("Ada", "C");  -- Add C for resources.c
   ...
end My_Project;
Update gui.adb to load from resources:
ada
with Gtk.Builder; use Gtk.Builder;
with Gtk.Style_Context; use Gtk.Style_Context;
with Gtk.Css_Provider; use Gtk.Css_Provider;
with Glib.Error; use Glib.Error;
with Glib.Resource; use Glib.Resource;

package body Gui is
   procedure Initialize_GUI is
      Builder : Gtk_Builder;
      Css_Provider : Gtk_Css_Provider;
      Error : GError;
   begin
      -- Register embedded resources (from resources.c)
      Register_Resource;

      -- Load Glade .ui from resources
      Gtk_New (Builder);
      if Add_From_Resource (Builder, "/org/myproject/ui/main_window.ui", Error) = 0 then
         Put_Line ("Error loading UI: " & Get_Message (Error));
         return;
      end if;

      -- Load CSS from resources
      Gtk_New (Css_Provider);
      if Load_From_Resource (Css_Provider, "/org/myproject/css/style.css", Error) = False then
         Put_Line ("Error loading CSS: " & Get_Message (Error));
         return;
      end if;
      Add_Provider_For_Screen (Get_Default_Screen, Css_Provider, Priority_Application);
   end Initialize_GUI;
end Gui;
Register_Resource: This is automatically generated in resources.c and must be called before accessing resources (declare it in gui.ads if needed, e.g., procedure Register_Resource; pragma Import (C, Register_Resource, "g_resource_myproject_register");).
Step 3: Hybrid Approach (Development + Deployment)
To support both scenarios without changing code:
Check if resources are available in the filesystem (development) and fall back to embedded resources (deployment).
Updated gui.adb:
ada
with Ada.Directories; use Ada.Directories;
with Gtk.Builder; use Gtk.Builder;
with Gtk.Style_Context; use Gtk.Style_Context;
with Gtk.Css_Provider; use Gtk.Css_Provider;
with Glib.Error; use Glib.Error;
with Glib.Resource; use Glib.Resource;

package body Gui is
   procedure Initialize_GUI is
      Builder : Gtk_Builder;
      Css_Provider : Gtk_Css_Provider;
      Error : GError;
      UI_Path : constant String := "resources/ui/main_window.ui";
      CSS_Path : constant String := "resources/css/style.css";
   begin
      -- Register embedded resources
      Register_Resource;

      Gtk_New (Builder);
      if Exists (UI_Path) then
         -- Development: Load from filesystem
         if Add_From_File (Builder, UI_Path, Error) = 0 then
            Put_Line ("Error loading UI file: " & Get_Message (Error));
            return;
         end if;
      else
         -- Deployment: Load from embedded resource
         if Add_From_Resource (Builder, "/org/myproject/ui/main_window.ui", Error) = 0 then
            Put_Line ("Error loading UI resource: " & Get_Message (Error));
            return;
         end if;
      end if;

      Gtk_New (Css_Provider);
      if Exists (CSS_Path) then
         -- Development: Load from filesystem
         if Load_From_Path (Css_Provider, CSS_Path, Error) = False then
            Put_Line ("Error loading CSS file: " & Get_Message (Error));
            return;
         end if;
      else
         -- Deployment: Load from embedded resource
         if Load_From_Resource (Css_Provider, "/org/myproject/css/style.css", Error) = False then
            Put_Line ("Error loading CSS resource: " & Get_Message (Error));
            return;
         end if;
      end if;
      Add_Provider_For_Screen (Get_Default_Screen, Css_Provider, Priority_Application);
   end Initialize_GUI;
end Gui;
Why This is the Best Approach
Development Convenience: GNAT Studio can load .ui and .css files directly from resources/ while you’re editing and testing.
Deployment Portability: Embedding resources with GResource ensures the executable is self-contained—no need to ship extra files or worry about paths.
Flexibility: The hybrid approach avoids code changes between development and deployment.
GNAT Studio Integration: The .gpr file manages everything, and GNAT Studio’s build system handles the C file seamlessly.
Additional Notes
Build Automation: Add a script or GNAT Studio build target to regenerate resources.c when .ui or .css files change:
bash
glib-compile-resources --target=src/resources.c --generate-source resources/resources.xml
CSS Priority: Adjust Priority_Application (e.g., to Priority_User) if your CSS isn’t applying as expected.
Debugging: During development, GNAT Studio’s debugger works fine with filesystem loading; embedded resources are opaque but reliable in deployment.
This setup balances development ease with deployment robustness. Let me know if you need help with any specific part—like writing the CSS, tweaking Glade, or integrating it further with GNAT Studio!
